# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RniApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def layer2_meas_info_get(self, **kwargs):  # noqa: E501
        """Retrieve information on layer 2 measurements  # noqa: E501

        Queries information about the layer 2 measurements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layer2_meas_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_ins_id: Application instance identifier
        :param list[str] cell_id: Comma separated list of E-UTRAN Cell Identities
        :param list[str] ue_ipv4_address: Comma separated list of IE IPv4 addresses as defined for the type for AssociateId
        :param list[str] ue_ipv6_address: Comma separated list of IE IPv6 addresses as defined for the type for AssociateId
        :param list[str] nated_ip_address: Comma separated list of IE NATed IP addresses as defined for the type for AssociateId
        :param list[str] gtp_teid: Comma separated list of GTP TEID addresses as defined for the type for AssociateId
        :param int dl_gbr_prb_usage_cell: PRB usage for downlink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_gbr_prb_usage_cell: PRB usage for uplink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_nongbr_prb_usage_cell: PRB usage for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_nongbr_prb_usage_cell: PRB usage for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_total_prb_usage_cell: PRB usage for total downlink traffic in percentage as defined in ETSI TS 136 314
        :param int ul_total_prb_usage_cell: PRB usage for total uplink traffic in percentage as defined in ETSI TS 136 314
        :param int received_dedicated_preambles_cell: Received dedicated preambles in percentage as defined in ETSI TS 136 314
        :param int received_randomly_selected_preambles_low_range_cell: Received randomly selected preambles in the low range in percentage as defined in ETSI TS 136 314
        :param int received_randomly_selected_preambles_high_range_cell: Received rendomly selected preambles in the high range in percentage as defined in ETSI TS 136 314
        :param int number_of_active_ue_dl_gbr_cell: Number of active UEs with downlink GBR traffic as defined in ETSI TS 136 314
        :param int number_of_active_ue_ul_gbr_cell: Number of active UEs with uplink GBR traffic as defined in ETSI TS 136 314
        :param int number_of_active_ue_dl_nongbr_cell: Number of active UEs with downlink non-GBR traffic as defined in ETSI TS 136 314
        :param int number_of_active_ue_ul_nongbr_cell: Number of active UEs with uplink non-GBR traffic as defined in ETSI TS 136 314
        :param int dl_gbr_pdr_cell: Packet discard rate for downlink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_gbr_pdr_cell: Packet discard rate for uplink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_nongbr_pdr_cell: Packet discard rate for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_nongbr_pdr_cell: Packet discard rate for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_gbr_delay_ue: Packet delay of downlink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_gbr_delay_ue: Packet delay of uplink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_nongbr_delay_ue: Packet delay of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_nongbr_delay_ue: Packet delay of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_gbr_pdr_ue: Packet discard rate of downlink GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int ul_gbr_pdr_ue: Packet discard rate of uplink GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int dl_nongbr_pdr_ue: Packet discard rate of downlink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int ul_nongbr_pdr_ue: Packet discard rate of uplink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int dl_gbr_throughput_ue: Scheduled throughput of downlink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_gbr_throughput_ue: Scheduled throughput of uplink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_nongbr_throughput_ue: Scheduled throughput of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_nongbr_throughput_ue: Scheduled throughput of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_gbr_data_volume_ue: Data volume of downlink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_gbr_data_volume_ue: Data volume of uplink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_nongbr_data_volume_ue: Data volume of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_nongbr_data_volume_ue: Data volume of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :return: L2Meas
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.layer2_meas_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.layer2_meas_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def layer2_meas_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve information on layer 2 measurements  # noqa: E501

        Queries information about the layer 2 measurements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.layer2_meas_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_ins_id: Application instance identifier
        :param list[str] cell_id: Comma separated list of E-UTRAN Cell Identities
        :param list[str] ue_ipv4_address: Comma separated list of IE IPv4 addresses as defined for the type for AssociateId
        :param list[str] ue_ipv6_address: Comma separated list of IE IPv6 addresses as defined for the type for AssociateId
        :param list[str] nated_ip_address: Comma separated list of IE NATed IP addresses as defined for the type for AssociateId
        :param list[str] gtp_teid: Comma separated list of GTP TEID addresses as defined for the type for AssociateId
        :param int dl_gbr_prb_usage_cell: PRB usage for downlink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_gbr_prb_usage_cell: PRB usage for uplink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_nongbr_prb_usage_cell: PRB usage for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_nongbr_prb_usage_cell: PRB usage for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_total_prb_usage_cell: PRB usage for total downlink traffic in percentage as defined in ETSI TS 136 314
        :param int ul_total_prb_usage_cell: PRB usage for total uplink traffic in percentage as defined in ETSI TS 136 314
        :param int received_dedicated_preambles_cell: Received dedicated preambles in percentage as defined in ETSI TS 136 314
        :param int received_randomly_selected_preambles_low_range_cell: Received randomly selected preambles in the low range in percentage as defined in ETSI TS 136 314
        :param int received_randomly_selected_preambles_high_range_cell: Received rendomly selected preambles in the high range in percentage as defined in ETSI TS 136 314
        :param int number_of_active_ue_dl_gbr_cell: Number of active UEs with downlink GBR traffic as defined in ETSI TS 136 314
        :param int number_of_active_ue_ul_gbr_cell: Number of active UEs with uplink GBR traffic as defined in ETSI TS 136 314
        :param int number_of_active_ue_dl_nongbr_cell: Number of active UEs with downlink non-GBR traffic as defined in ETSI TS 136 314
        :param int number_of_active_ue_ul_nongbr_cell: Number of active UEs with uplink non-GBR traffic as defined in ETSI TS 136 314
        :param int dl_gbr_pdr_cell: Packet discard rate for downlink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_gbr_pdr_cell: Packet discard rate for uplink GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_nongbr_pdr_cell: Packet discard rate for downlink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int ul_nongbr_pdr_cell: Packet discard rate for uplink non-GBR traffic in percentage as defined in ETSI TS 136 314
        :param int dl_gbr_delay_ue: Packet delay of downlink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_gbr_delay_ue: Packet delay of uplink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_nongbr_delay_ue: Packet delay of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_nongbr_delay_ue: Packet delay of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_gbr_pdr_ue: Packet discard rate of downlink GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int ul_gbr_pdr_ue: Packet discard rate of uplink GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int dl_nongbr_pdr_ue: Packet discard rate of downlink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int ul_nongbr_pdr_ue: Packet discard rate of uplink non-GBR traffic of a UE in percentage as defined in ETSI TS 136 314
        :param int dl_gbr_throughput_ue: Scheduled throughput of downlink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_gbr_throughput_ue: Scheduled throughput of uplink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_nongbr_throughput_ue: Scheduled throughput of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_nongbr_throughput_ue: Scheduled throughput of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_gbr_data_volume_ue: Data volume of downlink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_gbr_data_volume_ue: Data volume of uplink GBR traffic of a UE as defined in ETSI TS 136 314
        :param int dl_nongbr_data_volume_ue: Data volume of downlink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :param int ul_nongbr_data_volume_ue: Data volume of uplink non-GBR traffic of a UE as defined in ETSI TS 136 314
        :return: L2Meas
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_ins_id', 'cell_id', 'ue_ipv4_address', 'ue_ipv6_address', 'nated_ip_address', 'gtp_teid', 'dl_gbr_prb_usage_cell', 'ul_gbr_prb_usage_cell', 'dl_nongbr_prb_usage_cell', 'ul_nongbr_prb_usage_cell', 'dl_total_prb_usage_cell', 'ul_total_prb_usage_cell', 'received_dedicated_preambles_cell', 'received_randomly_selected_preambles_low_range_cell', 'received_randomly_selected_preambles_high_range_cell', 'number_of_active_ue_dl_gbr_cell', 'number_of_active_ue_ul_gbr_cell', 'number_of_active_ue_dl_nongbr_cell', 'number_of_active_ue_ul_nongbr_cell', 'dl_gbr_pdr_cell', 'ul_gbr_pdr_cell', 'dl_nongbr_pdr_cell', 'ul_nongbr_pdr_cell', 'dl_gbr_delay_ue', 'ul_gbr_delay_ue', 'dl_nongbr_delay_ue', 'ul_nongbr_delay_ue', 'dl_gbr_pdr_ue', 'ul_gbr_pdr_ue', 'dl_nongbr_pdr_ue', 'ul_nongbr_pdr_ue', 'dl_gbr_throughput_ue', 'ul_gbr_throughput_ue', 'dl_nongbr_throughput_ue', 'ul_nongbr_throughput_ue', 'dl_gbr_data_volume_ue', 'ul_gbr_data_volume_ue', 'dl_nongbr_data_volume_ue', 'ul_nongbr_data_volume_ue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method layer2_meas_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app_ins_id' in params:
            query_params.append(('app_ins_id', params['app_ins_id']))  # noqa: E501
        if 'cell_id' in params:
            query_params.append(('cell_id', params['cell_id']))  # noqa: E501
            collection_formats['cell_id'] = 'multi'  # noqa: E501
        if 'ue_ipv4_address' in params:
            query_params.append(('ue_ipv4_address', params['ue_ipv4_address']))  # noqa: E501
            collection_formats['ue_ipv4_address'] = 'multi'  # noqa: E501
        if 'ue_ipv6_address' in params:
            query_params.append(('ue_ipv6_address', params['ue_ipv6_address']))  # noqa: E501
            collection_formats['ue_ipv6_address'] = 'multi'  # noqa: E501
        if 'nated_ip_address' in params:
            query_params.append(('nated_ip_address', params['nated_ip_address']))  # noqa: E501
            collection_formats['nated_ip_address'] = 'multi'  # noqa: E501
        if 'gtp_teid' in params:
            query_params.append(('gtp_teid', params['gtp_teid']))  # noqa: E501
            collection_formats['gtp_teid'] = 'multi'  # noqa: E501
        if 'dl_gbr_prb_usage_cell' in params:
            query_params.append(('dl_gbr_prb_usage_cell', params['dl_gbr_prb_usage_cell']))  # noqa: E501
        if 'ul_gbr_prb_usage_cell' in params:
            query_params.append(('ul_gbr_prb_usage_cell', params['ul_gbr_prb_usage_cell']))  # noqa: E501
        if 'dl_nongbr_prb_usage_cell' in params:
            query_params.append(('dl_nongbr_prb_usage_cell', params['dl_nongbr_prb_usage_cell']))  # noqa: E501
        if 'ul_nongbr_prb_usage_cell' in params:
            query_params.append(('ul_nongbr_prb_usage_cell', params['ul_nongbr_prb_usage_cell']))  # noqa: E501
        if 'dl_total_prb_usage_cell' in params:
            query_params.append(('dl_total_prb_usage_cell', params['dl_total_prb_usage_cell']))  # noqa: E501
        if 'ul_total_prb_usage_cell' in params:
            query_params.append(('ul_total_prb_usage_cell', params['ul_total_prb_usage_cell']))  # noqa: E501
        if 'received_dedicated_preambles_cell' in params:
            query_params.append(('received_dedicated_preambles_cell', params['received_dedicated_preambles_cell']))  # noqa: E501
        if 'received_randomly_selected_preambles_low_range_cell' in params:
            query_params.append(('received_randomly_selected_preambles_low_range_cell', params['received_randomly_selected_preambles_low_range_cell']))  # noqa: E501
        if 'received_randomly_selected_preambles_high_range_cell' in params:
            query_params.append(('received_randomly_selected_preambles_high_range_cell', params['received_randomly_selected_preambles_high_range_cell']))  # noqa: E501
        if 'number_of_active_ue_dl_gbr_cell' in params:
            query_params.append(('number_of_active_ue_dl_gbr_cell', params['number_of_active_ue_dl_gbr_cell']))  # noqa: E501
        if 'number_of_active_ue_ul_gbr_cell' in params:
            query_params.append(('number_of_active_ue_ul_gbr_cell', params['number_of_active_ue_ul_gbr_cell']))  # noqa: E501
        if 'number_of_active_ue_dl_nongbr_cell' in params:
            query_params.append(('number_of_active_ue_dl_nongbr_cell', params['number_of_active_ue_dl_nongbr_cell']))  # noqa: E501
        if 'number_of_active_ue_ul_nongbr_cell' in params:
            query_params.append(('number_of_active_ue_ul_nongbr_cell', params['number_of_active_ue_ul_nongbr_cell']))  # noqa: E501
        if 'dl_gbr_pdr_cell' in params:
            query_params.append(('dl_gbr_pdr_cell', params['dl_gbr_pdr_cell']))  # noqa: E501
        if 'ul_gbr_pdr_cell' in params:
            query_params.append(('ul_gbr_pdr_cell', params['ul_gbr_pdr_cell']))  # noqa: E501
        if 'dl_nongbr_pdr_cell' in params:
            query_params.append(('dl_nongbr_pdr_cell', params['dl_nongbr_pdr_cell']))  # noqa: E501
        if 'ul_nongbr_pdr_cell' in params:
            query_params.append(('ul_nongbr_pdr_cell', params['ul_nongbr_pdr_cell']))  # noqa: E501
        if 'dl_gbr_delay_ue' in params:
            query_params.append(('dl_gbr_delay_ue', params['dl_gbr_delay_ue']))  # noqa: E501
        if 'ul_gbr_delay_ue' in params:
            query_params.append(('ul_gbr_delay_ue', params['ul_gbr_delay_ue']))  # noqa: E501
        if 'dl_nongbr_delay_ue' in params:
            query_params.append(('dl_nongbr_delay_ue', params['dl_nongbr_delay_ue']))  # noqa: E501
        if 'ul_nongbr_delay_ue' in params:
            query_params.append(('ul_nongbr_delay_ue', params['ul_nongbr_delay_ue']))  # noqa: E501
        if 'dl_gbr_pdr_ue' in params:
            query_params.append(('dl_gbr_pdr_ue', params['dl_gbr_pdr_ue']))  # noqa: E501
        if 'ul_gbr_pdr_ue' in params:
            query_params.append(('ul_gbr_pdr_ue', params['ul_gbr_pdr_ue']))  # noqa: E501
        if 'dl_nongbr_pdr_ue' in params:
            query_params.append(('dl_nongbr_pdr_ue', params['dl_nongbr_pdr_ue']))  # noqa: E501
        if 'ul_nongbr_pdr_ue' in params:
            query_params.append(('ul_nongbr_pdr_ue', params['ul_nongbr_pdr_ue']))  # noqa: E501
        if 'dl_gbr_throughput_ue' in params:
            query_params.append(('dl_gbr_throughput_ue', params['dl_gbr_throughput_ue']))  # noqa: E501
        if 'ul_gbr_throughput_ue' in params:
            query_params.append(('ul_gbr_throughput_ue', params['ul_gbr_throughput_ue']))  # noqa: E501
        if 'dl_nongbr_throughput_ue' in params:
            query_params.append(('dl_nongbr_throughput_ue', params['dl_nongbr_throughput_ue']))  # noqa: E501
        if 'ul_nongbr_throughput_ue' in params:
            query_params.append(('ul_nongbr_throughput_ue', params['ul_nongbr_throughput_ue']))  # noqa: E501
        if 'dl_gbr_data_volume_ue' in params:
            query_params.append(('dl_gbr_data_volume_ue', params['dl_gbr_data_volume_ue']))  # noqa: E501
        if 'ul_gbr_data_volume_ue' in params:
            query_params.append(('ul_gbr_data_volume_ue', params['ul_gbr_data_volume_ue']))  # noqa: E501
        if 'dl_nongbr_data_volume_ue' in params:
            query_params.append(('dl_nongbr_data_volume_ue', params['dl_nongbr_data_volume_ue']))  # noqa: E501
        if 'ul_nongbr_data_volume_ue' in params:
            query_params.append(('ul_nongbr_data_volume_ue', params['ul_nongbr_data_volume_ue']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/layer2_meas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='L2Meas',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plmn_info_get(self, app_ins_id, **kwargs):  # noqa: E501
        """Retrieve information on the underlying Mobile Network that the MEC application is associated to  # noqa: E501

        Queries information about the Mobile Network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plmn_info_get(app_ins_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] app_ins_id: Comma separated list of Application instance identifiers (required)
        :return: list[PlmnInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plmn_info_get_with_http_info(app_ins_id, **kwargs)  # noqa: E501
        else:
            (data) = self.plmn_info_get_with_http_info(app_ins_id, **kwargs)  # noqa: E501
            return data

    def plmn_info_get_with_http_info(self, app_ins_id, **kwargs):  # noqa: E501
        """Retrieve information on the underlying Mobile Network that the MEC application is associated to  # noqa: E501

        Queries information about the Mobile Network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plmn_info_get_with_http_info(app_ins_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] app_ins_id: Comma separated list of Application instance identifiers (required)
        :return: list[PlmnInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_ins_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plmn_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_ins_id' is set
        if ('app_ins_id' not in params or
                params['app_ins_id'] is None):
            raise ValueError("Missing the required parameter `app_ins_id` when calling `plmn_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app_ins_id' in params:
            query_params.append(('app_ins_id', params['app_ins_id']))  # noqa: E501
            collection_formats['app_ins_id'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/plmn_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PlmnInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rab_info_get(self, **kwargs):  # noqa: E501
        """Retrieve information on Radio Access Bearers  # noqa: E501

        Queries information about the Radio Access Bearers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rab_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_ins_id: Application instance identifier
        :param list[str] cell_id: Comma separated list of E-UTRAN Cell Identities
        :param list[str] ue_ipv4_address: Comma separated list of IE IPv4 addresses as defined for the type for AssociateId
        :param list[str] ue_ipv6_address: Comma separated list of IE IPv6 addresses as defined for the type for AssociateId
        :param list[str] nated_ip_address: Comma separated list of IE NATed IP addresses as defined for the type for AssociateId
        :param list[str] gtp_teid: Comma separated list of GTP TEID addresses as defined for the type for AssociateId
        :param int erab_id: E-RAB identifier
        :param int qci: QoS Class Identifier as defined in ETSI TS 123 401
        :param int erab_mbr_dl: Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401
        :param int erab_mbr_ul: Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401
        :param int erab_gbr_dl: Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401
        :param int erab_gbr_ul: Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401
        :return: RabInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rab_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rab_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def rab_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve information on Radio Access Bearers  # noqa: E501

        Queries information about the Radio Access Bearers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rab_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_ins_id: Application instance identifier
        :param list[str] cell_id: Comma separated list of E-UTRAN Cell Identities
        :param list[str] ue_ipv4_address: Comma separated list of IE IPv4 addresses as defined for the type for AssociateId
        :param list[str] ue_ipv6_address: Comma separated list of IE IPv6 addresses as defined for the type for AssociateId
        :param list[str] nated_ip_address: Comma separated list of IE NATed IP addresses as defined for the type for AssociateId
        :param list[str] gtp_teid: Comma separated list of GTP TEID addresses as defined for the type for AssociateId
        :param int erab_id: E-RAB identifier
        :param int qci: QoS Class Identifier as defined in ETSI TS 123 401
        :param int erab_mbr_dl: Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401
        :param int erab_mbr_ul: Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401
        :param int erab_gbr_dl: Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401
        :param int erab_gbr_ul: Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401
        :return: RabInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_ins_id', 'cell_id', 'ue_ipv4_address', 'ue_ipv6_address', 'nated_ip_address', 'gtp_teid', 'erab_id', 'qci', 'erab_mbr_dl', 'erab_mbr_ul', 'erab_gbr_dl', 'erab_gbr_ul']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rab_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app_ins_id' in params:
            query_params.append(('app_ins_id', params['app_ins_id']))  # noqa: E501
        if 'cell_id' in params:
            query_params.append(('cell_id', params['cell_id']))  # noqa: E501
            collection_formats['cell_id'] = 'multi'  # noqa: E501
        if 'ue_ipv4_address' in params:
            query_params.append(('ue_ipv4_address', params['ue_ipv4_address']))  # noqa: E501
            collection_formats['ue_ipv4_address'] = 'multi'  # noqa: E501
        if 'ue_ipv6_address' in params:
            query_params.append(('ue_ipv6_address', params['ue_ipv6_address']))  # noqa: E501
            collection_formats['ue_ipv6_address'] = 'multi'  # noqa: E501
        if 'nated_ip_address' in params:
            query_params.append(('nated_ip_address', params['nated_ip_address']))  # noqa: E501
            collection_formats['nated_ip_address'] = 'multi'  # noqa: E501
        if 'gtp_teid' in params:
            query_params.append(('gtp_teid', params['gtp_teid']))  # noqa: E501
            collection_formats['gtp_teid'] = 'multi'  # noqa: E501
        if 'erab_id' in params:
            query_params.append(('erab_id', params['erab_id']))  # noqa: E501
        if 'qci' in params:
            query_params.append(('qci', params['qci']))  # noqa: E501
        if 'erab_mbr_dl' in params:
            query_params.append(('erab_mbr_dl', params['erab_mbr_dl']))  # noqa: E501
        if 'erab_mbr_ul' in params:
            query_params.append(('erab_mbr_ul', params['erab_mbr_ul']))  # noqa: E501
        if 'erab_gbr_dl' in params:
            query_params.append(('erab_gbr_dl', params['erab_gbr_dl']))  # noqa: E501
        if 'erab_gbr_ul' in params:
            query_params.append(('erab_gbr_ul', params['erab_gbr_ul']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/rab_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RabInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s1_bearer_info_get(self, **kwargs):  # noqa: E501
        """Retrieve S1-U bearer information related to specific UE(s)  # noqa: E501

        Queries information about the S1 bearer(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s1_bearer_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] temp_ue_id: Comma separated list of temporary identifiers allocated for the specific UE as defined in   ETSI TS 136 413
        :param list[str] ue_ipv4_address: Comma separated list of IE IPv4 addresses as defined for the type for AssociateId
        :param list[str] ue_ipv6_address: Comma separated list of IE IPv6 addresses as defined for the type for AssociateId
        :param list[str] nated_ip_address: Comma separated list of IE NATed IP addresses as defined for the type for AssociateId
        :param list[str] gtp_teid: Comma separated list of GTP TEID addresses as defined for the type for AssociateId
        :param list[str] cell_id: Comma separated list of E-UTRAN Cell Identities
        :param list[int] erab_id: Comma separated list of E-RAB identifiers
        :return: S1BearerInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s1_bearer_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.s1_bearer_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def s1_bearer_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve S1-U bearer information related to specific UE(s)  # noqa: E501

        Queries information about the S1 bearer(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s1_bearer_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] temp_ue_id: Comma separated list of temporary identifiers allocated for the specific UE as defined in   ETSI TS 136 413
        :param list[str] ue_ipv4_address: Comma separated list of IE IPv4 addresses as defined for the type for AssociateId
        :param list[str] ue_ipv6_address: Comma separated list of IE IPv6 addresses as defined for the type for AssociateId
        :param list[str] nated_ip_address: Comma separated list of IE NATed IP addresses as defined for the type for AssociateId
        :param list[str] gtp_teid: Comma separated list of GTP TEID addresses as defined for the type for AssociateId
        :param list[str] cell_id: Comma separated list of E-UTRAN Cell Identities
        :param list[int] erab_id: Comma separated list of E-RAB identifiers
        :return: S1BearerInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['temp_ue_id', 'ue_ipv4_address', 'ue_ipv6_address', 'nated_ip_address', 'gtp_teid', 'cell_id', 'erab_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s1_bearer_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'temp_ue_id' in params:
            query_params.append(('temp_ue_id', params['temp_ue_id']))  # noqa: E501
            collection_formats['temp_ue_id'] = 'multi'  # noqa: E501
        if 'ue_ipv4_address' in params:
            query_params.append(('ue_ipv4_address', params['ue_ipv4_address']))  # noqa: E501
            collection_formats['ue_ipv4_address'] = 'multi'  # noqa: E501
        if 'ue_ipv6_address' in params:
            query_params.append(('ue_ipv6_address', params['ue_ipv6_address']))  # noqa: E501
            collection_formats['ue_ipv6_address'] = 'multi'  # noqa: E501
        if 'nated_ip_address' in params:
            query_params.append(('nated_ip_address', params['nated_ip_address']))  # noqa: E501
            collection_formats['nated_ip_address'] = 'multi'  # noqa: E501
        if 'gtp_teid' in params:
            query_params.append(('gtp_teid', params['gtp_teid']))  # noqa: E501
            collection_formats['gtp_teid'] = 'multi'  # noqa: E501
        if 'cell_id' in params:
            query_params.append(('cell_id', params['cell_id']))  # noqa: E501
            collection_formats['cell_id'] = 'multi'  # noqa: E501
        if 'erab_id' in params:
            query_params.append(('erab_id', params['erab_id']))  # noqa: E501
            collection_formats['erab_id'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queries/s1_bearer_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='S1BearerInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscription_link_list_subscriptions_get(self, **kwargs):  # noqa: E501
        """Retrieve information on subscriptions for notifications  # noqa: E501

        Queries information on subscriptions for notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscription_link_list_subscriptions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_type: Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer.
        :return: SubscriptionLinkList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscription_link_list_subscriptions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.subscription_link_list_subscriptions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def subscription_link_list_subscriptions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve information on subscriptions for notifications  # noqa: E501

        Queries information on subscriptions for notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscription_link_list_subscriptions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_type: Filter on a specific subscription type. Permitted values: cell_change, rab_est, rab_mod, rab_rel, meas_rep_ue, nr_meas_rep_ue, timing_advance_ue, ca_reconf, s1_bearer.
        :return: SubscriptionLinkList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscription_link_list_subscriptions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'subscription_type' in params:
            query_params.append(('subscription_type', params['subscription_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionLinkList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscriptions_delete(self, subscription_id, **kwargs):  # noqa: E501
        """Cancel an existing subscription  # noqa: E501

        Cancels an existing subscription, identified by its self-referring URI returned on creation (initial POST)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_delete(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_id: Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscriptions_delete_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.subscriptions_delete_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def subscriptions_delete_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Cancel an existing subscription  # noqa: E501

        Cancels an existing subscription, identified by its self-referring URI returned on creation (initial POST)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_delete_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_id: Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscriptions_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `subscriptions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscriptionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscriptions_get(self, subscription_id, **kwargs):  # noqa: E501
        """Retrieve information on current specific subscription  # noqa: E501

        Queries information about an existing subscription, identified by its self-referring URI returned on creation (initial POST)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_get(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_id: Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request (required)
        :return: InlineSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscriptions_get_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.subscriptions_get_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def subscriptions_get_with_http_info(self, subscription_id, **kwargs):  # noqa: E501
        """Retrieve information on current specific subscription  # noqa: E501

        Queries information about an existing subscription, identified by its self-referring URI returned on creation (initial POST)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_get_with_http_info(subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_id: Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request (required)
        :return: InlineSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscriptions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `subscriptions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscriptionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscriptions_post(self, body, **kwargs):  # noqa: E501
        """Create a new subscription  # noqa: E501

        Creates a new subscription to Radio Network Information notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineSubscription body: Subscription to be created (required)
        :return: InlineSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscriptions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.subscriptions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def subscriptions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new subscription  # noqa: E501

        Creates a new subscription to Radio Network Information notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineSubscription body: Subscription to be created (required)
        :return: InlineSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscriptions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `subscriptions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscriptions_put(self, body, subscription_id, **kwargs):  # noqa: E501
        """Modify an existing subscription  # noqa: E501

        Updates an existing subscription, identified by its self-referring URI returned on creation (initial POST)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_put(body, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineSubscription body: Subscription to be modified (required)
        :param str subscription_id: Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request (required)
        :return: InlineSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscriptions_put_with_http_info(body, subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.subscriptions_put_with_http_info(body, subscription_id, **kwargs)  # noqa: E501
            return data

    def subscriptions_put_with_http_info(self, body, subscription_id, **kwargs):  # noqa: E501
        """Modify an existing subscription  # noqa: E501

        Updates an existing subscription, identified by its self-referring URI returned on creation (initial POST)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscriptions_put_with_http_info(body, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InlineSubscription body: Subscription to be modified (required)
        :param str subscription_id: Subscription Id, specifically the \"Self-referring URI\" returned in the subscription request (required)
        :return: InlineSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscriptions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `subscriptions_put`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `subscriptions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/subscriptions/{subscriptionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
