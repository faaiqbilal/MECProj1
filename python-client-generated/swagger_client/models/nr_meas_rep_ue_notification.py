# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NrMeasRepUeNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associate_id': 'list[AssociateId]',
        'eutra_neigh_cell_meas_info': 'list[NrMeasRepUeNotificationEutraNeighCellMeasInfo]',
        'notification_type': 'str',
        'nr_neigh_cell_meas_info': 'list[NrMeasRepUeNotificationNrNeighCellMeasInfo]',
        'serv_cell_meas_info': 'list[NrMeasRepUeNotificationServCellMeasInfo]',
        'time_stamp': 'TimeStamp',
        'trigger_nr': 'TriggerNr'
    }

    attribute_map = {
        'associate_id': 'associateId',
        'eutra_neigh_cell_meas_info': 'eutraNeighCellMeasInfo',
        'notification_type': 'notificationType',
        'nr_neigh_cell_meas_info': 'nrNeighCellMeasInfo',
        'serv_cell_meas_info': 'servCellMeasInfo',
        'time_stamp': 'timeStamp',
        'trigger_nr': 'triggerNr'
    }

    def __init__(self, associate_id=None, eutra_neigh_cell_meas_info=None, notification_type=None, nr_neigh_cell_meas_info=None, serv_cell_meas_info=None, time_stamp=None, trigger_nr=None):  # noqa: E501
        """NrMeasRepUeNotification - a model defined in Swagger"""  # noqa: E501
        self._associate_id = None
        self._eutra_neigh_cell_meas_info = None
        self._notification_type = None
        self._nr_neigh_cell_meas_info = None
        self._serv_cell_meas_info = None
        self._time_stamp = None
        self._trigger_nr = None
        self.discriminator = None
        if associate_id is not None:
            self.associate_id = associate_id
        if eutra_neigh_cell_meas_info is not None:
            self.eutra_neigh_cell_meas_info = eutra_neigh_cell_meas_info
        self.notification_type = notification_type
        if nr_neigh_cell_meas_info is not None:
            self.nr_neigh_cell_meas_info = nr_neigh_cell_meas_info
        if serv_cell_meas_info is not None:
            self.serv_cell_meas_info = serv_cell_meas_info
        if time_stamp is not None:
            self.time_stamp = time_stamp
        self.trigger_nr = trigger_nr

    @property
    def associate_id(self):
        """Gets the associate_id of this NrMeasRepUeNotification.  # noqa: E501

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :return: The associate_id of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: list[AssociateId]
        """
        return self._associate_id

    @associate_id.setter
    def associate_id(self, associate_id):
        """Sets the associate_id of this NrMeasRepUeNotification.

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :param associate_id: The associate_id of this NrMeasRepUeNotification.  # noqa: E501
        :type: list[AssociateId]
        """

        self._associate_id = associate_id

    @property
    def eutra_neigh_cell_meas_info(self):
        """Gets the eutra_neigh_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501

        This parameter can be repeated to contain measurement information of all the neighbouring cells up to N. It shall not be included if nrNeighCellMeasInfo is included.  # noqa: E501

        :return: The eutra_neigh_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: list[NrMeasRepUeNotificationEutraNeighCellMeasInfo]
        """
        return self._eutra_neigh_cell_meas_info

    @eutra_neigh_cell_meas_info.setter
    def eutra_neigh_cell_meas_info(self, eutra_neigh_cell_meas_info):
        """Sets the eutra_neigh_cell_meas_info of this NrMeasRepUeNotification.

        This parameter can be repeated to contain measurement information of all the neighbouring cells up to N. It shall not be included if nrNeighCellMeasInfo is included.  # noqa: E501

        :param eutra_neigh_cell_meas_info: The eutra_neigh_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501
        :type: list[NrMeasRepUeNotificationEutraNeighCellMeasInfo]
        """

        self._eutra_neigh_cell_meas_info = eutra_neigh_cell_meas_info

    @property
    def notification_type(self):
        """Gets the notification_type of this NrMeasRepUeNotification.  # noqa: E501

        Shall be set to \"NrMeasRepUeNotification\".  # noqa: E501

        :return: The notification_type of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this NrMeasRepUeNotification.

        Shall be set to \"NrMeasRepUeNotification\".  # noqa: E501

        :param notification_type: The notification_type of this NrMeasRepUeNotification.  # noqa: E501
        :type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def nr_neigh_cell_meas_info(self):
        """Gets the nr_neigh_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501

        This parameter can be repeated to contain measurement information of all the neighbouring cells up to N. It shall not be included if eutraNeighCellMeasInfo is included.  # noqa: E501

        :return: The nr_neigh_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: list[NrMeasRepUeNotificationNrNeighCellMeasInfo]
        """
        return self._nr_neigh_cell_meas_info

    @nr_neigh_cell_meas_info.setter
    def nr_neigh_cell_meas_info(self, nr_neigh_cell_meas_info):
        """Sets the nr_neigh_cell_meas_info of this NrMeasRepUeNotification.

        This parameter can be repeated to contain measurement information of all the neighbouring cells up to N. It shall not be included if eutraNeighCellMeasInfo is included.  # noqa: E501

        :param nr_neigh_cell_meas_info: The nr_neigh_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501
        :type: list[NrMeasRepUeNotificationNrNeighCellMeasInfo]
        """

        self._nr_neigh_cell_meas_info = nr_neigh_cell_meas_info

    @property
    def serv_cell_meas_info(self):
        """Gets the serv_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501

        This parameter can be repeated to contain information of all the serving cells up to N.  # noqa: E501

        :return: The serv_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: list[NrMeasRepUeNotificationServCellMeasInfo]
        """
        return self._serv_cell_meas_info

    @serv_cell_meas_info.setter
    def serv_cell_meas_info(self, serv_cell_meas_info):
        """Sets the serv_cell_meas_info of this NrMeasRepUeNotification.

        This parameter can be repeated to contain information of all the serving cells up to N.  # noqa: E501

        :param serv_cell_meas_info: The serv_cell_meas_info of this NrMeasRepUeNotification.  # noqa: E501
        :type: list[NrMeasRepUeNotificationServCellMeasInfo]
        """

        self._serv_cell_meas_info = serv_cell_meas_info

    @property
    def time_stamp(self):
        """Gets the time_stamp of this NrMeasRepUeNotification.  # noqa: E501


        :return: The time_stamp of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this NrMeasRepUeNotification.


        :param time_stamp: The time_stamp of this NrMeasRepUeNotification.  # noqa: E501
        :type: TimeStamp
        """

        self._time_stamp = time_stamp

    @property
    def trigger_nr(self):
        """Gets the trigger_nr of this NrMeasRepUeNotification.  # noqa: E501


        :return: The trigger_nr of this NrMeasRepUeNotification.  # noqa: E501
        :rtype: TriggerNr
        """
        return self._trigger_nr

    @trigger_nr.setter
    def trigger_nr(self, trigger_nr):
        """Sets the trigger_nr of this NrMeasRepUeNotification.


        :param trigger_nr: The trigger_nr of this NrMeasRepUeNotification.  # noqa: E501
        :type: TriggerNr
        """
        if trigger_nr is None:
            raise ValueError("Invalid value for `trigger_nr`, must not be `None`")  # noqa: E501

        self._trigger_nr = trigger_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NrMeasRepUeNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NrMeasRepUeNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
