# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NrMeasRepUeSubscriptionFilterCriteriaNrMrs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_instance_id': 'str',
        'associate_id': 'list[AssociateId]',
        'nrcgi': 'list[NRcgi]',
        'trigger_nr': 'list[TriggerNr]'
    }

    attribute_map = {
        'app_instance_id': 'appInstanceId',
        'associate_id': 'associateId',
        'nrcgi': 'nrcgi',
        'trigger_nr': 'triggerNr'
    }

    def __init__(self, app_instance_id=None, associate_id=None, nrcgi=None, trigger_nr=None):  # noqa: E501
        """NrMeasRepUeSubscriptionFilterCriteriaNrMrs - a model defined in Swagger"""  # noqa: E501
        self._app_instance_id = None
        self._associate_id = None
        self._nrcgi = None
        self._trigger_nr = None
        self.discriminator = None
        if app_instance_id is not None:
            self.app_instance_id = app_instance_id
        if associate_id is not None:
            self.associate_id = associate_id
        if nrcgi is not None:
            self.nrcgi = nrcgi
        if trigger_nr is not None:
            self.trigger_nr = trigger_nr

    @property
    def app_instance_id(self):
        """Gets the app_instance_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501

        Unique identifier for the MEC application instance.  # noqa: E501

        :return: The app_instance_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :rtype: str
        """
        return self._app_instance_id

    @app_instance_id.setter
    def app_instance_id(self, app_instance_id):
        """Sets the app_instance_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.

        Unique identifier for the MEC application instance.  # noqa: E501

        :param app_instance_id: The app_instance_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :type: str
        """

        self._app_instance_id = app_instance_id

    @property
    def associate_id(self):
        """Gets the associate_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501

        0 to N identifiers to associate the information for a specific UE or flow.  # noqa: E501

        :return: The associate_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :rtype: list[AssociateId]
        """
        return self._associate_id

    @associate_id.setter
    def associate_id(self, associate_id):
        """Sets the associate_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.

        0 to N identifiers to associate the information for a specific UE or flow.  # noqa: E501

        :param associate_id: The associate_id of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :type: list[AssociateId]
        """

        self._associate_id = associate_id

    @property
    def nrcgi(self):
        """Gets the nrcgi of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501

        NR Cell Global Identier.  # noqa: E501

        :return: The nrcgi of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :rtype: list[NRcgi]
        """
        return self._nrcgi

    @nrcgi.setter
    def nrcgi(self, nrcgi):
        """Sets the nrcgi of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.

        NR Cell Global Identier.  # noqa: E501

        :param nrcgi: The nrcgi of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :type: list[NRcgi]
        """

        self._nrcgi = nrcgi

    @property
    def trigger_nr(self):
        """Gets the trigger_nr of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501

        Corresponds to a specific 5G UE Measurement Report trigger.  # noqa: E501

        :return: The trigger_nr of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :rtype: list[TriggerNr]
        """
        return self._trigger_nr

    @trigger_nr.setter
    def trigger_nr(self, trigger_nr):
        """Sets the trigger_nr of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.

        Corresponds to a specific 5G UE Measurement Report trigger.  # noqa: E501

        :param trigger_nr: The trigger_nr of this NrMeasRepUeSubscriptionFilterCriteriaNrMrs.  # noqa: E501
        :type: list[TriggerNr]
        """

        self._trigger_nr = trigger_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NrMeasRepUeSubscriptionFilterCriteriaNrMrs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NrMeasRepUeSubscriptionFilterCriteriaNrMrs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
