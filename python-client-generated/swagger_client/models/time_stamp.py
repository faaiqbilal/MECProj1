# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeStamp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nano_seconds': 'int',
        'seconds': 'int'
    }

    attribute_map = {
        'nano_seconds': 'nanoSeconds',
        'seconds': 'seconds'
    }

    def __init__(self, nano_seconds=None, seconds=None):  # noqa: E501
        """TimeStamp - a model defined in Swagger"""  # noqa: E501
        self._nano_seconds = None
        self._seconds = None
        self.discriminator = None
        self.nano_seconds = nano_seconds
        self.seconds = seconds

    @property
    def nano_seconds(self):
        """Gets the nano_seconds of this TimeStamp.  # noqa: E501

        The nanoseconds part of the time. Time is defined as Unix-time since January 1, 1970, 00:00:00 UTC.  # noqa: E501

        :return: The nano_seconds of this TimeStamp.  # noqa: E501
        :rtype: int
        """
        return self._nano_seconds

    @nano_seconds.setter
    def nano_seconds(self, nano_seconds):
        """Sets the nano_seconds of this TimeStamp.

        The nanoseconds part of the time. Time is defined as Unix-time since January 1, 1970, 00:00:00 UTC.  # noqa: E501

        :param nano_seconds: The nano_seconds of this TimeStamp.  # noqa: E501
        :type: int
        """
        if nano_seconds is None:
            raise ValueError("Invalid value for `nano_seconds`, must not be `None`")  # noqa: E501

        self._nano_seconds = nano_seconds

    @property
    def seconds(self):
        """Gets the seconds of this TimeStamp.  # noqa: E501

        The seconds part of the time. Time is defined as Unixtime since January 1, 1970, 00:00:00 UTC.  # noqa: E501

        :return: The seconds of this TimeStamp.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this TimeStamp.

        The seconds part of the time. Time is defined as Unixtime since January 1, 1970, 00:00:00 UTC.  # noqa: E501

        :param seconds: The seconds of this TimeStamp.  # noqa: E501
        :type: int
        """
        if seconds is None:
            raise ValueError("Invalid value for `seconds`, must not be `None`")  # noqa: E501

        self._seconds = seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeStamp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeStamp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
