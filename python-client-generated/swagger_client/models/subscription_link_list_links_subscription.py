# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionLinkListLinksSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'subscription_type': 'str'
    }

    attribute_map = {
        'href': 'href',
        'subscription_type': 'subscriptionType'
    }

    def __init__(self, href=None, subscription_type=None):  # noqa: E501
        """SubscriptionLinkListLinksSubscription - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._subscription_type = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if subscription_type is not None:
            self.subscription_type = subscription_type

    @property
    def href(self):
        """Gets the href of this SubscriptionLinkListLinksSubscription.  # noqa: E501

        The URI referring to the subscription.  # noqa: E501

        :return: The href of this SubscriptionLinkListLinksSubscription.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SubscriptionLinkListLinksSubscription.

        The URI referring to the subscription.  # noqa: E501

        :param href: The href of this SubscriptionLinkListLinksSubscription.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def subscription_type(self):
        """Gets the subscription_type of this SubscriptionLinkListLinksSubscription.  # noqa: E501

        Type of the subscription. The string shall be set according to the \"subscriptionType\" attribute of the associated subscription data type event defined in clause 6.3.  # noqa: E501

        :return: The subscription_type of this SubscriptionLinkListLinksSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this SubscriptionLinkListLinksSubscription.

        Type of the subscription. The string shall be set according to the \"subscriptionType\" attribute of the associated subscription data type event defined in clause 6.3.  # noqa: E501

        :param subscription_type: The subscription_type of this SubscriptionLinkListLinksSubscription.  # noqa: E501
        :type: str
        """

        self._subscription_type = subscription_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionLinkListLinksSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionLinkListLinksSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
