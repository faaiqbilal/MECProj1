# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeasRepUeNotificationEutranNeighbourCellMeasInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ecgi': 'Ecgi',
        'rsrp': 'int',
        'rsrp_ex': 'int',
        'rsrq': 'int',
        'rsrq_ex': 'int',
        'sinr': 'int'
    }

    attribute_map = {
        'ecgi': 'ecgi',
        'rsrp': 'rsrp',
        'rsrp_ex': 'rsrpEx',
        'rsrq': 'rsrq',
        'rsrq_ex': 'rsrqEx',
        'sinr': 'sinr'
    }

    def __init__(self, ecgi=None, rsrp=None, rsrp_ex=None, rsrq=None, rsrq_ex=None, sinr=None):  # noqa: E501
        """MeasRepUeNotificationEutranNeighbourCellMeasInfo - a model defined in Swagger"""  # noqa: E501
        self._ecgi = None
        self._rsrp = None
        self._rsrp_ex = None
        self._rsrq = None
        self._rsrq_ex = None
        self._sinr = None
        self.discriminator = None
        if ecgi is not None:
            self.ecgi = ecgi
        if rsrp is not None:
            self.rsrp = rsrp
        if rsrp_ex is not None:
            self.rsrp_ex = rsrp_ex
        if rsrq is not None:
            self.rsrq = rsrq
        if rsrq_ex is not None:
            self.rsrq_ex = rsrq_ex
        if sinr is not None:
            self.sinr = sinr

    @property
    def ecgi(self):
        """Gets the ecgi of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501


        :return: The ecgi of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :rtype: Ecgi
        """
        return self._ecgi

    @ecgi.setter
    def ecgi(self, ecgi):
        """Sets the ecgi of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.


        :param ecgi: The ecgi of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :type: Ecgi
        """

        self._ecgi = ecgi

    @property
    def rsrp(self):
        """Gets the rsrp of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501

        Reference Signal Received Power as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :return: The rsrp of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.

        Reference Signal Received Power as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :param rsrp: The rsrp of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :type: int
        """

        self._rsrp = rsrp

    @property
    def rsrp_ex(self):
        """Gets the rsrp_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501

        Extended Reference Signal Received Power, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :return: The rsrp_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :rtype: int
        """
        return self._rsrp_ex

    @rsrp_ex.setter
    def rsrp_ex(self, rsrp_ex):
        """Sets the rsrp_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.

        Extended Reference Signal Received Power, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :param rsrp_ex: The rsrp_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :type: int
        """

        self._rsrp_ex = rsrp_ex

    @property
    def rsrq(self):
        """Gets the rsrq of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501

        Reference Signal Received Quality as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :return: The rsrq of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :rtype: int
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.

        Reference Signal Received Quality as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :param rsrq: The rsrq of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :type: int
        """

        self._rsrq = rsrq

    @property
    def rsrq_ex(self):
        """Gets the rsrq_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501

        Extended Reference Signal Received Quality, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :return: The rsrq_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :rtype: int
        """
        return self._rsrq_ex

    @rsrq_ex.setter
    def rsrq_ex(self, rsrq_ex):
        """Sets the rsrq_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.

        Extended Reference Signal Received Quality, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :param rsrq_ex: The rsrq_ex of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :type: int
        """

        self._rsrq_ex = rsrq_ex

    @property
    def sinr(self):
        """Gets the sinr of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501

        Reference Signal \"Signal to Interference plus Noise Ratio\", with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :return: The sinr of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :rtype: int
        """
        return self._sinr

    @sinr.setter
    def sinr(self, sinr):
        """Sets the sinr of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.

        Reference Signal \"Signal to Interference plus Noise Ratio\", with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :param sinr: The sinr of this MeasRepUeNotificationEutranNeighbourCellMeasInfo.  # noqa: E501
        :type: int
        """

        self._sinr = sinr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasRepUeNotificationEutranNeighbourCellMeasInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasRepUeNotificationEutranNeighbourCellMeasInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
