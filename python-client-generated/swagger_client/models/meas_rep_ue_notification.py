# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeasRepUeNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associate_id': 'list[AssociateId]',
        'carrier_aggregation_meas_info': 'list[MeasRepUeNotificationCarrierAggregationMeasInfo]',
        'ecgi': 'Ecgi',
        'eutran_neighbour_cell_meas_info': 'list[MeasRepUeNotificationEutranNeighbourCellMeasInfo]',
        'height_ue': 'int',
        'new_radio_meas_info': 'list[MeasRepUeNotificationNewRadioMeasInfo]',
        'new_radio_meas_nei_info': 'list[MeasRepUeNotificationNewRadioMeasNeiInfo]',
        'notification_type': 'str',
        'rsrp': 'int',
        'rsrp_ex': 'int',
        'rsrq': 'int',
        'rsrq_ex': 'int',
        'sinr': 'int',
        'time_stamp': 'TimeStamp',
        'trigger': 'Trigger'
    }

    attribute_map = {
        'associate_id': 'associateId',
        'carrier_aggregation_meas_info': 'carrierAggregationMeasInfo',
        'ecgi': 'ecgi',
        'eutran_neighbour_cell_meas_info': 'eutranNeighbourCellMeasInfo',
        'height_ue': 'heightUe',
        'new_radio_meas_info': 'newRadioMeasInfo',
        'new_radio_meas_nei_info': 'newRadioMeasNeiInfo',
        'notification_type': 'notificationType',
        'rsrp': 'rsrp',
        'rsrp_ex': 'rsrpEx',
        'rsrq': 'rsrq',
        'rsrq_ex': 'rsrqEx',
        'sinr': 'sinr',
        'time_stamp': 'timeStamp',
        'trigger': 'trigger'
    }

    def __init__(self, associate_id=None, carrier_aggregation_meas_info=None, ecgi=None, eutran_neighbour_cell_meas_info=None, height_ue=None, new_radio_meas_info=None, new_radio_meas_nei_info=None, notification_type=None, rsrp=None, rsrp_ex=None, rsrq=None, rsrq_ex=None, sinr=None, time_stamp=None, trigger=None):  # noqa: E501
        """MeasRepUeNotification - a model defined in Swagger"""  # noqa: E501
        self._associate_id = None
        self._carrier_aggregation_meas_info = None
        self._ecgi = None
        self._eutran_neighbour_cell_meas_info = None
        self._height_ue = None
        self._new_radio_meas_info = None
        self._new_radio_meas_nei_info = None
        self._notification_type = None
        self._rsrp = None
        self._rsrp_ex = None
        self._rsrq = None
        self._rsrq_ex = None
        self._sinr = None
        self._time_stamp = None
        self._trigger = None
        self.discriminator = None
        if associate_id is not None:
            self.associate_id = associate_id
        if carrier_aggregation_meas_info is not None:
            self.carrier_aggregation_meas_info = carrier_aggregation_meas_info
        self.ecgi = ecgi
        if eutran_neighbour_cell_meas_info is not None:
            self.eutran_neighbour_cell_meas_info = eutran_neighbour_cell_meas_info
        if height_ue is not None:
            self.height_ue = height_ue
        if new_radio_meas_info is not None:
            self.new_radio_meas_info = new_radio_meas_info
        if new_radio_meas_nei_info is not None:
            self.new_radio_meas_nei_info = new_radio_meas_nei_info
        self.notification_type = notification_type
        self.rsrp = rsrp
        if rsrp_ex is not None:
            self.rsrp_ex = rsrp_ex
        self.rsrq = rsrq
        if rsrq_ex is not None:
            self.rsrq_ex = rsrq_ex
        if sinr is not None:
            self.sinr = sinr
        if time_stamp is not None:
            self.time_stamp = time_stamp
        self.trigger = trigger

    @property
    def associate_id(self):
        """Gets the associate_id of this MeasRepUeNotification.  # noqa: E501

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :return: The associate_id of this MeasRepUeNotification.  # noqa: E501
        :rtype: list[AssociateId]
        """
        return self._associate_id

    @associate_id.setter
    def associate_id(self, associate_id):
        """Sets the associate_id of this MeasRepUeNotification.

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :param associate_id: The associate_id of this MeasRepUeNotification.  # noqa: E501
        :type: list[AssociateId]
        """

        self._associate_id = associate_id

    @property
    def carrier_aggregation_meas_info(self):
        """Gets the carrier_aggregation_meas_info of this MeasRepUeNotification.  # noqa: E501

        This parameter can be repeated to contain information of all the carriers assign for Carrier Aggregation up to M.  # noqa: E501

        :return: The carrier_aggregation_meas_info of this MeasRepUeNotification.  # noqa: E501
        :rtype: list[MeasRepUeNotificationCarrierAggregationMeasInfo]
        """
        return self._carrier_aggregation_meas_info

    @carrier_aggregation_meas_info.setter
    def carrier_aggregation_meas_info(self, carrier_aggregation_meas_info):
        """Sets the carrier_aggregation_meas_info of this MeasRepUeNotification.

        This parameter can be repeated to contain information of all the carriers assign for Carrier Aggregation up to M.  # noqa: E501

        :param carrier_aggregation_meas_info: The carrier_aggregation_meas_info of this MeasRepUeNotification.  # noqa: E501
        :type: list[MeasRepUeNotificationCarrierAggregationMeasInfo]
        """

        self._carrier_aggregation_meas_info = carrier_aggregation_meas_info

    @property
    def ecgi(self):
        """Gets the ecgi of this MeasRepUeNotification.  # noqa: E501


        :return: The ecgi of this MeasRepUeNotification.  # noqa: E501
        :rtype: Ecgi
        """
        return self._ecgi

    @ecgi.setter
    def ecgi(self, ecgi):
        """Sets the ecgi of this MeasRepUeNotification.


        :param ecgi: The ecgi of this MeasRepUeNotification.  # noqa: E501
        :type: Ecgi
        """
        if ecgi is None:
            raise ValueError("Invalid value for `ecgi`, must not be `None`")  # noqa: E501

        self._ecgi = ecgi

    @property
    def eutran_neighbour_cell_meas_info(self):
        """Gets the eutran_neighbour_cell_meas_info of this MeasRepUeNotification.  # noqa: E501

        This parameter can be repeated to contain information of all the neighbouring cells up to N.  # noqa: E501

        :return: The eutran_neighbour_cell_meas_info of this MeasRepUeNotification.  # noqa: E501
        :rtype: list[MeasRepUeNotificationEutranNeighbourCellMeasInfo]
        """
        return self._eutran_neighbour_cell_meas_info

    @eutran_neighbour_cell_meas_info.setter
    def eutran_neighbour_cell_meas_info(self, eutran_neighbour_cell_meas_info):
        """Sets the eutran_neighbour_cell_meas_info of this MeasRepUeNotification.

        This parameter can be repeated to contain information of all the neighbouring cells up to N.  # noqa: E501

        :param eutran_neighbour_cell_meas_info: The eutran_neighbour_cell_meas_info of this MeasRepUeNotification.  # noqa: E501
        :type: list[MeasRepUeNotificationEutranNeighbourCellMeasInfo]
        """

        self._eutran_neighbour_cell_meas_info = eutran_neighbour_cell_meas_info

    @property
    def height_ue(self):
        """Gets the height_ue of this MeasRepUeNotification.  # noqa: E501

        Indicates height of the UE in meters relative to the sea level as defined in ETSI TS 136.331 [i.7].  # noqa: E501

        :return: The height_ue of this MeasRepUeNotification.  # noqa: E501
        :rtype: int
        """
        return self._height_ue

    @height_ue.setter
    def height_ue(self, height_ue):
        """Sets the height_ue of this MeasRepUeNotification.

        Indicates height of the UE in meters relative to the sea level as defined in ETSI TS 136.331 [i.7].  # noqa: E501

        :param height_ue: The height_ue of this MeasRepUeNotification.  # noqa: E501
        :type: int
        """

        self._height_ue = height_ue

    @property
    def new_radio_meas_info(self):
        """Gets the new_radio_meas_info of this MeasRepUeNotification.  # noqa: E501

        5G New Radio secondary serving cells measurement information.  # noqa: E501

        :return: The new_radio_meas_info of this MeasRepUeNotification.  # noqa: E501
        :rtype: list[MeasRepUeNotificationNewRadioMeasInfo]
        """
        return self._new_radio_meas_info

    @new_radio_meas_info.setter
    def new_radio_meas_info(self, new_radio_meas_info):
        """Sets the new_radio_meas_info of this MeasRepUeNotification.

        5G New Radio secondary serving cells measurement information.  # noqa: E501

        :param new_radio_meas_info: The new_radio_meas_info of this MeasRepUeNotification.  # noqa: E501
        :type: list[MeasRepUeNotificationNewRadioMeasInfo]
        """

        self._new_radio_meas_info = new_radio_meas_info

    @property
    def new_radio_meas_nei_info(self):
        """Gets the new_radio_meas_nei_info of this MeasRepUeNotification.  # noqa: E501

        Measurement quantities concerning the 5G NR neighbours.  # noqa: E501

        :return: The new_radio_meas_nei_info of this MeasRepUeNotification.  # noqa: E501
        :rtype: list[MeasRepUeNotificationNewRadioMeasNeiInfo]
        """
        return self._new_radio_meas_nei_info

    @new_radio_meas_nei_info.setter
    def new_radio_meas_nei_info(self, new_radio_meas_nei_info):
        """Sets the new_radio_meas_nei_info of this MeasRepUeNotification.

        Measurement quantities concerning the 5G NR neighbours.  # noqa: E501

        :param new_radio_meas_nei_info: The new_radio_meas_nei_info of this MeasRepUeNotification.  # noqa: E501
        :type: list[MeasRepUeNotificationNewRadioMeasNeiInfo]
        """

        self._new_radio_meas_nei_info = new_radio_meas_nei_info

    @property
    def notification_type(self):
        """Gets the notification_type of this MeasRepUeNotification.  # noqa: E501

        Shall be set to \"MeasRepUeNotification\".  # noqa: E501

        :return: The notification_type of this MeasRepUeNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this MeasRepUeNotification.

        Shall be set to \"MeasRepUeNotification\".  # noqa: E501

        :param notification_type: The notification_type of this MeasRepUeNotification.  # noqa: E501
        :type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def rsrp(self):
        """Gets the rsrp of this MeasRepUeNotification.  # noqa: E501

        Reference Signal Received Power as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :return: The rsrp of this MeasRepUeNotification.  # noqa: E501
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this MeasRepUeNotification.

        Reference Signal Received Power as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :param rsrp: The rsrp of this MeasRepUeNotification.  # noqa: E501
        :type: int
        """
        if rsrp is None:
            raise ValueError("Invalid value for `rsrp`, must not be `None`")  # noqa: E501

        self._rsrp = rsrp

    @property
    def rsrp_ex(self):
        """Gets the rsrp_ex of this MeasRepUeNotification.  # noqa: E501

        Extended Reference Signal Received Power, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :return: The rsrp_ex of this MeasRepUeNotification.  # noqa: E501
        :rtype: int
        """
        return self._rsrp_ex

    @rsrp_ex.setter
    def rsrp_ex(self, rsrp_ex):
        """Sets the rsrp_ex of this MeasRepUeNotification.

        Extended Reference Signal Received Power, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :param rsrp_ex: The rsrp_ex of this MeasRepUeNotification.  # noqa: E501
        :type: int
        """

        self._rsrp_ex = rsrp_ex

    @property
    def rsrq(self):
        """Gets the rsrq of this MeasRepUeNotification.  # noqa: E501

        Reference Signal Received Quality as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :return: The rsrq of this MeasRepUeNotification.  # noqa: E501
        :rtype: int
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this MeasRepUeNotification.

        Reference Signal Received Quality as defined in ETSI TS 136 214 [i.5].  # noqa: E501

        :param rsrq: The rsrq of this MeasRepUeNotification.  # noqa: E501
        :type: int
        """
        if rsrq is None:
            raise ValueError("Invalid value for `rsrq`, must not be `None`")  # noqa: E501

        self._rsrq = rsrq

    @property
    def rsrq_ex(self):
        """Gets the rsrq_ex of this MeasRepUeNotification.  # noqa: E501

        Extended Reference Signal Received Quality, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :return: The rsrq_ex of this MeasRepUeNotification.  # noqa: E501
        :rtype: int
        """
        return self._rsrq_ex

    @rsrq_ex.setter
    def rsrq_ex(self, rsrq_ex):
        """Sets the rsrq_ex of this MeasRepUeNotification.

        Extended Reference Signal Received Quality, with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :param rsrq_ex: The rsrq_ex of this MeasRepUeNotification.  # noqa: E501
        :type: int
        """

        self._rsrq_ex = rsrq_ex

    @property
    def sinr(self):
        """Gets the sinr of this MeasRepUeNotification.  # noqa: E501

        Reference Signal \"Signal to Interference plus Noise Ratio\", with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :return: The sinr of this MeasRepUeNotification.  # noqa: E501
        :rtype: int
        """
        return self._sinr

    @sinr.setter
    def sinr(self, sinr):
        """Sets the sinr of this MeasRepUeNotification.

        Reference Signal \"Signal to Interference plus Noise Ratio\", with value mapping defined in ETSI TS 136 133 [i.16].  # noqa: E501

        :param sinr: The sinr of this MeasRepUeNotification.  # noqa: E501
        :type: int
        """

        self._sinr = sinr

    @property
    def time_stamp(self):
        """Gets the time_stamp of this MeasRepUeNotification.  # noqa: E501


        :return: The time_stamp of this MeasRepUeNotification.  # noqa: E501
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this MeasRepUeNotification.


        :param time_stamp: The time_stamp of this MeasRepUeNotification.  # noqa: E501
        :type: TimeStamp
        """

        self._time_stamp = time_stamp

    @property
    def trigger(self):
        """Gets the trigger of this MeasRepUeNotification.  # noqa: E501


        :return: The trigger of this MeasRepUeNotification.  # noqa: E501
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MeasRepUeNotification.


        :param trigger: The trigger of this MeasRepUeNotification.  # noqa: E501
        :type: Trigger
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501

        self._trigger = trigger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasRepUeNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasRepUeNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
