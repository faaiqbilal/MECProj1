# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CaReconfNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associate_id': 'list[AssociateId]',
        'carrier_aggregation_meas_info': 'list[CaReconfNotificationCarrierAggregationMeasInfo]',
        'ecgi': 'Ecgi',
        'notification_type': 'str',
        'secondary_cell_add': 'list[CaReconfNotificationSecondaryCellAdd]',
        'secondary_cell_remove': 'list[CaReconfNotificationSecondaryCellAdd]',
        'time_stamp': 'TimeStamp'
    }

    attribute_map = {
        'associate_id': 'associateId',
        'carrier_aggregation_meas_info': 'carrierAggregationMeasInfo',
        'ecgi': 'ecgi',
        'notification_type': 'notificationType',
        'secondary_cell_add': 'secondaryCellAdd',
        'secondary_cell_remove': 'secondaryCellRemove',
        'time_stamp': 'timeStamp'
    }

    def __init__(self, associate_id=None, carrier_aggregation_meas_info=None, ecgi=None, notification_type=None, secondary_cell_add=None, secondary_cell_remove=None, time_stamp=None):  # noqa: E501
        """CaReconfNotification - a model defined in Swagger"""  # noqa: E501
        self._associate_id = None
        self._carrier_aggregation_meas_info = None
        self._ecgi = None
        self._notification_type = None
        self._secondary_cell_add = None
        self._secondary_cell_remove = None
        self._time_stamp = None
        self.discriminator = None
        if associate_id is not None:
            self.associate_id = associate_id
        if carrier_aggregation_meas_info is not None:
            self.carrier_aggregation_meas_info = carrier_aggregation_meas_info
        self.ecgi = ecgi
        self.notification_type = notification_type
        if secondary_cell_add is not None:
            self.secondary_cell_add = secondary_cell_add
        if secondary_cell_remove is not None:
            self.secondary_cell_remove = secondary_cell_remove
        if time_stamp is not None:
            self.time_stamp = time_stamp

    @property
    def associate_id(self):
        """Gets the associate_id of this CaReconfNotification.  # noqa: E501

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :return: The associate_id of this CaReconfNotification.  # noqa: E501
        :rtype: list[AssociateId]
        """
        return self._associate_id

    @associate_id.setter
    def associate_id(self, associate_id):
        """Sets the associate_id of this CaReconfNotification.

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :param associate_id: The associate_id of this CaReconfNotification.  # noqa: E501
        :type: list[AssociateId]
        """

        self._associate_id = associate_id

    @property
    def carrier_aggregation_meas_info(self):
        """Gets the carrier_aggregation_meas_info of this CaReconfNotification.  # noqa: E501

        This parameter can be repeated to contain information of all the carriers assign for Carrier Aggregation up to M.  # noqa: E501

        :return: The carrier_aggregation_meas_info of this CaReconfNotification.  # noqa: E501
        :rtype: list[CaReconfNotificationCarrierAggregationMeasInfo]
        """
        return self._carrier_aggregation_meas_info

    @carrier_aggregation_meas_info.setter
    def carrier_aggregation_meas_info(self, carrier_aggregation_meas_info):
        """Sets the carrier_aggregation_meas_info of this CaReconfNotification.

        This parameter can be repeated to contain information of all the carriers assign for Carrier Aggregation up to M.  # noqa: E501

        :param carrier_aggregation_meas_info: The carrier_aggregation_meas_info of this CaReconfNotification.  # noqa: E501
        :type: list[CaReconfNotificationCarrierAggregationMeasInfo]
        """

        self._carrier_aggregation_meas_info = carrier_aggregation_meas_info

    @property
    def ecgi(self):
        """Gets the ecgi of this CaReconfNotification.  # noqa: E501


        :return: The ecgi of this CaReconfNotification.  # noqa: E501
        :rtype: Ecgi
        """
        return self._ecgi

    @ecgi.setter
    def ecgi(self, ecgi):
        """Sets the ecgi of this CaReconfNotification.


        :param ecgi: The ecgi of this CaReconfNotification.  # noqa: E501
        :type: Ecgi
        """
        if ecgi is None:
            raise ValueError("Invalid value for `ecgi`, must not be `None`")  # noqa: E501

        self._ecgi = ecgi

    @property
    def notification_type(self):
        """Gets the notification_type of this CaReconfNotification.  # noqa: E501

        Shall be set to \"CaReConfNotification\".  # noqa: E501

        :return: The notification_type of this CaReconfNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this CaReconfNotification.

        Shall be set to \"CaReConfNotification\".  # noqa: E501

        :param notification_type: The notification_type of this CaReconfNotification.  # noqa: E501
        :type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def secondary_cell_add(self):
        """Gets the secondary_cell_add of this CaReconfNotification.  # noqa: E501


        :return: The secondary_cell_add of this CaReconfNotification.  # noqa: E501
        :rtype: list[CaReconfNotificationSecondaryCellAdd]
        """
        return self._secondary_cell_add

    @secondary_cell_add.setter
    def secondary_cell_add(self, secondary_cell_add):
        """Sets the secondary_cell_add of this CaReconfNotification.


        :param secondary_cell_add: The secondary_cell_add of this CaReconfNotification.  # noqa: E501
        :type: list[CaReconfNotificationSecondaryCellAdd]
        """

        self._secondary_cell_add = secondary_cell_add

    @property
    def secondary_cell_remove(self):
        """Gets the secondary_cell_remove of this CaReconfNotification.  # noqa: E501


        :return: The secondary_cell_remove of this CaReconfNotification.  # noqa: E501
        :rtype: list[CaReconfNotificationSecondaryCellAdd]
        """
        return self._secondary_cell_remove

    @secondary_cell_remove.setter
    def secondary_cell_remove(self, secondary_cell_remove):
        """Sets the secondary_cell_remove of this CaReconfNotification.


        :param secondary_cell_remove: The secondary_cell_remove of this CaReconfNotification.  # noqa: E501
        :type: list[CaReconfNotificationSecondaryCellAdd]
        """

        self._secondary_cell_remove = secondary_cell_remove

    @property
    def time_stamp(self):
        """Gets the time_stamp of this CaReconfNotification.  # noqa: E501


        :return: The time_stamp of this CaReconfNotification.  # noqa: E501
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this CaReconfNotification.


        :param time_stamp: The time_stamp of this CaReconfNotification.  # noqa: E501
        :type: TimeStamp
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CaReconfNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CaReconfNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
