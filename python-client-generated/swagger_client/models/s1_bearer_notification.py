# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class S1BearerNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_type': 'str',
        's1_event': 'int',
        's1_ue_info': 'S1BearerNotificationS1UeInfo',
        'time_stamp': 'TimeStamp'
    }

    attribute_map = {
        'notification_type': 'notificationType',
        's1_event': 's1Event',
        's1_ue_info': 's1UeInfo',
        'time_stamp': 'timeStamp'
    }

    def __init__(self, notification_type=None, s1_event=None, s1_ue_info=None, time_stamp=None):  # noqa: E501
        """S1BearerNotification - a model defined in Swagger"""  # noqa: E501
        self._notification_type = None
        self._s1_event = None
        self._s1_ue_info = None
        self._time_stamp = None
        self.discriminator = None
        self.notification_type = notification_type
        self.s1_event = s1_event
        self.s1_ue_info = s1_ue_info
        if time_stamp is not None:
            self.time_stamp = time_stamp

    @property
    def notification_type(self):
        """Gets the notification_type of this S1BearerNotification.  # noqa: E501

        Shall be set to \"S1BearerNotification\".  # noqa: E501

        :return: The notification_type of this S1BearerNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this S1BearerNotification.

        Shall be set to \"S1BearerNotification\".  # noqa: E501

        :param notification_type: The notification_type of this S1BearerNotification.  # noqa: E501
        :type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def s1_event(self):
        """Gets the s1_event of this S1BearerNotification.  # noqa: E501

        The subscribed event that triggered this notification in S1BearerSubscription.  # noqa: E501

        :return: The s1_event of this S1BearerNotification.  # noqa: E501
        :rtype: int
        """
        return self._s1_event

    @s1_event.setter
    def s1_event(self, s1_event):
        """Sets the s1_event of this S1BearerNotification.

        The subscribed event that triggered this notification in S1BearerSubscription.  # noqa: E501

        :param s1_event: The s1_event of this S1BearerNotification.  # noqa: E501
        :type: int
        """
        if s1_event is None:
            raise ValueError("Invalid value for `s1_event`, must not be `None`")  # noqa: E501

        self._s1_event = s1_event

    @property
    def s1_ue_info(self):
        """Gets the s1_ue_info of this S1BearerNotification.  # noqa: E501


        :return: The s1_ue_info of this S1BearerNotification.  # noqa: E501
        :rtype: S1BearerNotificationS1UeInfo
        """
        return self._s1_ue_info

    @s1_ue_info.setter
    def s1_ue_info(self, s1_ue_info):
        """Sets the s1_ue_info of this S1BearerNotification.


        :param s1_ue_info: The s1_ue_info of this S1BearerNotification.  # noqa: E501
        :type: S1BearerNotificationS1UeInfo
        """
        if s1_ue_info is None:
            raise ValueError("Invalid value for `s1_ue_info`, must not be `None`")  # noqa: E501

        self._s1_ue_info = s1_ue_info

    @property
    def time_stamp(self):
        """Gets the time_stamp of this S1BearerNotification.  # noqa: E501


        :return: The time_stamp of this S1BearerNotification.  # noqa: E501
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this S1BearerNotification.


        :param time_stamp: The time_stamp of this S1BearerNotification.  # noqa: E501
        :type: TimeStamp
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(S1BearerNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S1BearerNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
