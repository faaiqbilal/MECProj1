# coding: utf-8

"""
    ETSI GS MEC 012 - Radio Network Information API

    The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI.  # noqa: E501

    OpenAPI spec version: 2.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MeasRepUeNotificationNewRadioMeasInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nr_bn_cs': 'MeasRepUeNotificationNrBNCs',
        'nr_carrier_freq': 'int',
        'nr_s_cs': 'MeasRepUeNotificationNrSCs'
    }

    attribute_map = {
        'nr_bn_cs': 'nrBNCs',
        'nr_carrier_freq': 'nrCarrierFreq',
        'nr_s_cs': 'nrSCs'
    }

    def __init__(self, nr_bn_cs=None, nr_carrier_freq=None, nr_s_cs=None):  # noqa: E501
        """MeasRepUeNotificationNewRadioMeasInfo - a model defined in Swagger"""  # noqa: E501
        self._nr_bn_cs = None
        self._nr_carrier_freq = None
        self._nr_s_cs = None
        self.discriminator = None
        if nr_bn_cs is not None:
            self.nr_bn_cs = nr_bn_cs
        if nr_carrier_freq is not None:
            self.nr_carrier_freq = nr_carrier_freq
        if nr_s_cs is not None:
            self.nr_s_cs = nr_s_cs

    @property
    def nr_bn_cs(self):
        """Gets the nr_bn_cs of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501


        :return: The nr_bn_cs of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501
        :rtype: MeasRepUeNotificationNrBNCs
        """
        return self._nr_bn_cs

    @nr_bn_cs.setter
    def nr_bn_cs(self, nr_bn_cs):
        """Sets the nr_bn_cs of this MeasRepUeNotificationNewRadioMeasInfo.


        :param nr_bn_cs: The nr_bn_cs of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501
        :type: MeasRepUeNotificationNrBNCs
        """

        self._nr_bn_cs = nr_bn_cs

    @property
    def nr_carrier_freq(self):
        """Gets the nr_carrier_freq of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501

        ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR carrier frequency, as defined in ETSI TS 138.101 [i.15].  # noqa: E501

        :return: The nr_carrier_freq of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501
        :rtype: int
        """
        return self._nr_carrier_freq

    @nr_carrier_freq.setter
    def nr_carrier_freq(self, nr_carrier_freq):
        """Sets the nr_carrier_freq of this MeasRepUeNotificationNewRadioMeasInfo.

        ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR carrier frequency, as defined in ETSI TS 138.101 [i.15].  # noqa: E501

        :param nr_carrier_freq: The nr_carrier_freq of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501
        :type: int
        """

        self._nr_carrier_freq = nr_carrier_freq

    @property
    def nr_s_cs(self):
        """Gets the nr_s_cs of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501


        :return: The nr_s_cs of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501
        :rtype: MeasRepUeNotificationNrSCs
        """
        return self._nr_s_cs

    @nr_s_cs.setter
    def nr_s_cs(self, nr_s_cs):
        """Sets the nr_s_cs of this MeasRepUeNotificationNewRadioMeasInfo.


        :param nr_s_cs: The nr_s_cs of this MeasRepUeNotificationNewRadioMeasInfo.  # noqa: E501
        :type: MeasRepUeNotificationNrSCs
        """

        self._nr_s_cs = nr_s_cs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MeasRepUeNotificationNewRadioMeasInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasRepUeNotificationNewRadioMeasInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
